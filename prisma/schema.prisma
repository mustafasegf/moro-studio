// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/utils/zod-prisma"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  nama           String
  email          String
  hp             String?
  instagram      String?
  role           Role             @default(user)
  // sessions       Session[]
  booking        Booking[]
  blastMarketing BlastMarketing[]
  chatRoomAdmin  ChatRoom[]       @relation("ChatRoomAdmin")
  chatRoomUser   ChatRoom[]       @relation("ChatRoomUser")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deleted        Boolean          @default(false)
  // feedback       Feedback[]
  ContohImage    ContohImage[]
  Feedback       Feedback[]
  FotoUser       FotoUser[]
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime
//
//   @@unique([identifier, token])
// }

enum Role {
  admin
  studioManager
  blogManager
  user
}

model Katalog {
  id          String    @id @default(cuid())
  nama        String
  durasi      Int
  harga       Int
  jumlahOrang Int?
  deskripsi   String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Booking     Booking[]
  deleted     Boolean   @default(false)
}

model Kupon {
  id             String    @id @default(cuid())
  nama           String
  kode           String    @unique
  diskon         Float
  kuotaPemakaian Int       @default(0)
  kuotaTerpakai  Int       @default(0)
  active         Boolean   @default(true)
  tanggal        DateTime
  Booking        Booking[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model BackgroundFoto {
  warna     String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Booking   Booking[]
  deleted   Boolean   @default(false)
}

enum BookinStatus {
  booked
  dp
  lunas
}

model Booking {
  id              String         @id @default(cuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  backgroundWarna String
  background      BackgroundFoto @relation(fields: [backgroundWarna], references: [warna])
  peliharaan      Boolean        @default(false)
  harga           Int
  jadwal          DateTime
  durasi          Int
  jumlahOrang     Int
  katalogId       String
  katalog         Katalog        @relation(fields: [katalogId], references: [id])
  // detail          String         @db.Text
  kuponId         String?
  kupon           Kupon?         @relation(fields: [kuponId], references: [id])
  status          BookinStatus
  // foto FotoUser[]
  Pembayaran      Pembayaran[]
  // FotoUser        FotoUser[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deleted         Boolean        @default(false)
}

model Pembayaran {
  id        String   @id @default(cuid())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  dp        Boolean
  jumlah    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model FotoUser {
//   id        String   @id @default(cuid())
//   gambar    String
//   bookingId String
//   booking   Booking  @relation(fields: [bookingId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model FotoUser {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KontenBlog {
  id        String        @id @default(cuid())
  judul     String
  comment   CommentBlog[]
  thumbnail String
  isi       String        @db.Text
  posted    Boolean
  like      Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CommentBlog {
  id           String     @id @default(cuid())
  kontenBlogId String
  kontenBlog   KontenBlog @relation(fields: [kontenBlogId], references: [id])
  nama         String
  isi          String
  like         Int
  dislike      Int
  createdAt    DateTime
  updatedAt    DateTime
}

model BlastMarketing {
  id        String   @id @default(cuid())
  subjek    String
  isi       String   @db.Text
  penerima  User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Home {
  id        String   @id @default(cuid())
  image     String
  carousel  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatRoom {
  Id        String   @id @default(cuid())
  adminId   String
  admin     User     @relation("ChatRoomAdmin", fields: [adminId], references: [id])
  userId    String?
  User      User?    @relation("ChatRoomUser", fields: [userId], references: [id])
  Chat      Chat[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id         String   @id @default(cuid())
  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [Id])
  chat       String   @db.Text
  adminSend  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Feedback {
  id             String           @id @default(cuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  isiFeedback    String
  namaPenulis    String
  feedbackAnswer FeedbackAnswer[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model FeedbackAnswer {
  id                 String           @id @default(cuid())
  feedbackId         String
  feedback           Feedback         @relation(fields: [feedbackId], references: [id])
  feedbackQuestionId String
  question           FeedbackQuestion @relation(fields: [feedbackQuestionId], references: [id])
  answer             String?
}

model FeedbackQuestion {
  id             String           @id @default(cuid())
  pertanyaan     String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  FeedbackAnswer FeedbackAnswer[]
}

model Contoh {
  id    String @id @default(cuid())
  email String
}

model ContohImage {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
}
